#include "stdio.h"
#include "common.h"
#include "stdlib.h"
#include "stack.h"
#include "jayutil.h"

extern void *memset(void*, int, size_t);

#define err(s) (fprintf(stderr, s))

byte **digested = 0, *num = 0;

struct buffer_info_t {
  size_t off, len;
};

struct buffer_info_t digested_info, num_info;

void destroy_this(unsigned int exit_code){
  if(exit_code)
    fprintf(stderr, "exiting with code %d\n", exit_code);
  exit(exit_code);
}

int prec(const byte c){
  switch(c){
    case '+':
    case '-':
      return 1;
    case '*':
    case '/':
    case '%':
      return 2;
    default: return 0;
  }
}

int is_num(const byte c){
  return ('0' - 1 < c && c < '9' + 1) || c == '.';
}

static byte *strval(const byte c){
  switch(c){
    case '+': return "+";
    case '-': return "-";
    case '*': return "*";
    case '/': return "/";
    default:
      return 0;
  }
}

static void digested_add(byte *c){
  digested[digested_info.off++] = c;
  if(digested_info.off == digested_info.len){
    byte **next = (byte**)malloc(sizeof(byte*) * (digested_info.len *= 2));
    for(int i = 0; i < digested_info.len; i++)
      next[i] = digested_info.len / 2 > i ? digested[i] : 0;
    free(digested);
    digested = next;
  }
}

static void reset(void){
  digested_info.len = 1 << 3;
  digested_info.off = 0;
}

void *create_buffer(const size_t size){
  void *memspot = malloc(size);
  memset(memspot, 0, size);
  return memspot;
}

void reset_info(struct buffer_info_t *buffer){
  buffer->len = 1 << 3;
  buffer->off = 0;
}

void eval(const byte *s){
  printf("input: %s\n", s);
  stack_init();
  num = create_buffer(num_info.len);
  digested = (byte**)malloc(sizeof(byte*) * digested_info.len);
  unsigned short num_empty = 1;
  for(int i = 0; i < jayutil.len((void*)s); i++){
    byte c = s[i];
    unsigned short is_operand = is_num(c);
    if(prec(c)){
      if(num_empty && c == '-') {
        is_operand = 1;
      } 
      if(!is_operand){
        digested_add(num);
        num_info.len = 1 << 3;
        num_info.off = 0;
        num = create_buffer(num_info.len);
        num_empty = 1;
        while(!stack_is_empty() && prec(*stack_peek()) > prec(c))
          digested_add(stack_pop());
        stack_push(strval(c));
      }
    }
    if(is_operand){
      num[num_info.off++] = c;
      num_empty = 0;
      if(num_info.off == num_info.len){
        byte *next = (byte*)malloc(num_info.len *= 2);
        for(int j = 0; j < num_info.len; j++)
          next[j] = num_info.len / 2  > j ? num[j] : 0;
        free(num);
        num = next;
      }
    } 
  }
  if(!num_empty) digested_add(num);
  while(!stack_is_empty())
    digested_add(stack_pop());
  jayutil.display_string_array((const byte**)digested, digested_info.off);  
  stack_init();
  for(int i = 0; i < digested_info.len; i++){
    byte *c = digested[i];
    if(prec(c[jayutil.len(c) - 1])){
      byte *buff;
      byte *right_b = stack_pop();
      byte *left_b = stack_pop();
      double right = strtod(right_b, &buff);
      double left = strtod(left_b, &buff);
      free(right_b);
      free(left_b);
      double res = 0;
      switch(*c){
        case '+':
          res = left + right;
          break;
        case '*':
          res = left * right;
          break;
        case '/':
          res = left / right;
          break;
        case '%':
          res = (long long)left % (long long)right;
        default:
          fprintf(stderr, "invalid string detected as an operator %s\n", c);
          destroy_this(0xfff & 3);
          break;
      }
      byte *buffer = (byte*)malloc(sizeof(double));
      memset(buffer, 0, sizeof(double));
      sprintf(buffer, "%f", res);
      stack_push(buffer);
    }
    if(is_num(*c)) stack_push(c);
  }
  printf("%s\n", stack_peek());
  free(stack_pop());
  free(digested);
}

int main(int argc, byte **argv){
  while(1 == 1){
    printf("enter input: ");
    byte buffer[1 << 7];
    memset(buffer, 0, sizeof(buffer));
    fgets(buffer, sizeof(buffer) - 1, stdin);
    if(*buffer == '\n') eval("1+2*3"); // TODO: remove after testing 
    else eval(buffer);
  }
  return 0;
}
